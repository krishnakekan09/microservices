name: Centralized CI/CD Pipeline for Multi-Language Repos

on:
  repository_dispatch:
    types: [ci_cd_trigger]  # This event type is triggered by other repositories

  workflow_dispatch:  # Manual trigger
    inputs:
      language:
        description: 'Application Language (dotnet, java, python)'
        required: true
        default: 'dotnet'  # Default to dotnet if no input is provided
      repo_link:
        description: 'Repository Link (e.g., user/repo-name)'
        required: true
      environment:
        description: 'Target Environment (dev, prod)'
        required: true
        default: 'dev'  # Default to dev if no input is provided

jobs:
  ci_cd_pipeline:
    runs-on: self-hosted
    env:
      # Dynamically set APP_LANGUAGE based on the repository's app_language input
      APP_LANGUAGE: ${{ github.event.client_payload.app_language }}
      
      # Dynamically set the environment based on the environment input
      ENVIRONMENT: ${{ github.event.client_payload.environment }}

      REPO_LINK: ${{ github.event.client_payload.repo_link }}  # Repo link from the dispatch payload
      SONARQUBE_PROJECT_KEY: ${{ secrets.SONARQUBE_PROJECT_KEY }}  # SonarQube project key from secrets
      SONARQUBE_TOKEN: ${{ secrets.SONAR_TOKEN }}  # SonarQube token from secrets

    steps:
      # Debugging: Print input variables to verify their values
      - name: Debugging - Print input variables
        run: |
          echo "Repository Link: ${{ github.event.client_payload.repo_link }}"
          echo "Application Language: ${{ github.event.client_payload.app_language }}"
          echo "Target Environment: ${{ github.event.client_payload.environment }}"
          echo "Detected Environment (from env): ${{ env.ENVIRONMENT }}"
          echo "Detected Application Language (from env): ${{ env.APP_LANGUAGE }}"
          echo "REPO_NAME=$(echo "${{ env.REPO_LINK }}" | sed 's#https://github.com/##' | sed 's#\.git$##')" >> $GITHUB_ENV
          echo "REPO_NAME: ${{ env.REPO_NAME }}"
          echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "branch: ${{ env.branch }}"

      # Checkout the application repository
      - name: Checkout the application repository
        uses: actions/checkout@v2
        with:
          repository: ${{ env.REPO_NAME }}  # Clone the repo dynamically based on the passed repo link
          ref: ${{ github.event.client_payload.ref }}  # Check out the appropriate branch (ref)
          #token: ${{ secrets.GITHUB_TOKEN }}  # Use the GITHUB_TOKEN for authentication

      # Log Application Language and Repo Details
      - name: Log Application Language and Repo Details
        run: |
          echo "Repository Name: ${{ github.event.client_payload.repo_link }}"
          echo "Detected Application Language: ${{ env.APP_LANGUAGE }}"
          if [ "${{ env.APP_LANGUAGE }}" == "unknown" ]; then
            echo "ERROR: Unknown language detected. Please check the repository name."
            exit 1
          fi

      # Check if Maven Wrapper exists (for Java projects)
      - name: Check if Maven Wrapper exists
        run: |
          if [ "${{ env.APP_LANGUAGE }}" == "java" ] && [ ! -f "./mvnw" ]; then
            echo "ERROR: Maven Wrapper (mvnw) not found. Ensure mvnw is included in the repository."
            exit 1
          fi

      # Set up environment dynamically based on the application language
      - name: Set up environment for application language
        run: |
          if [ "${{ env.APP_LANGUAGE }}" == "dotnet" ]; then
            echo "Setting up .NET environment"
            if ! command -v dotnet &> /dev/null; then
              echo ".NET SDK not found. Installing .NET SDK..."
              # Install .NET SDK (example for Ubuntu)
              sudo add-apt-repository ppa:dotnet/backports
              sudo apt-get update && sudo apt-get install -y dotnet-sdk-9.0
              sudo apt-get update && sudo apt-get install -y aspnetcore-runtime-9.0
              # Verify dotnet installation
              dotnet --version || { echo "ERROR: .NET SDK installation failed."; exit 1; }
            else
              echo ".NET SDK is already installed"
            fi
          elif [ "${{ env.APP_LANGUAGE }}" == "python" ]; then
            echo "Setting up Python environment"
            if ! command -v python &> /dev/null; then
              echo "Python not found. Installing Python..."
              # Install Python (example for Ubuntu)
              sudo apt-get update && sudo apt-get install -y python3
            else
              echo "Python is already installed"
            fi
          elif [ "${{ env.APP_LANGUAGE }}" == "java" ]; then
            echo "Setting up Java environment"
            if ! command -v java &> /dev/null; then
              echo "Java not found. Installing Java..."
              # Install Java (example for Ubuntu)
              sudo apt-get update && sudo apt-get install -y openjdk-11-jdk
            else
              echo "Java is already installed"
            fi
          else
            echo "Unknown language!"
            exit 1
          fi

      # Install dependencies based on the language
      - name: Install dependencies
        run: |
          if [ "${{ env.APP_LANGUAGE }}" == "dotnet" ]; then
            dotnet restore || { echo "ERROR: Failed to restore .NET dependencies. Exiting."; exit 1; }
          elif [ "${{ env.APP_LANGUAGE }}" == "python" ]; then
            python -m pip install --upgrade pip || { echo "ERROR: Failed to upgrade pip. Exiting."; exit 1; }
            pip install -r requirements.txt || { echo "ERROR: Failed to install from requirements.txt. Exiting."; exit 1; }
          elif [ "${{ env.APP_LANGUAGE }}" == "java" ]; then
            ./mvnw install || { echo "ERROR: Maven install failed. Exiting."; exit 1; }
          else
            echo "No dependencies to install for unknown language"
            exit 1
          fi

      # SonarQube analysis step (condensed into one step)
      - name: SonarQube analysis
        run: |
          if [ "${{ env.APP_LANGUAGE }}" == "dotnet" ]; then
            echo "Installing .NET SonarQube scanner..."
            mkdir -p $HOME/.sonar/scanner
            if ! dotnet tool list --tool-path $HOME/.sonar/scanner | grep -q "dotnet-sonarscanner"; then
              dotnet tool install dotnet-sonarscanner --tool-path $HOME/.sonar/scanner
            else
              echo "dotnet-sonarscanner is already installed, skipping installation."
            fi
            # Begin and end SonarQube analysis for .NET
            echo "$HOME/.sonar/scanner" >> $GITHUB_PATH
            $HOME/.sonar/scanner/dotnet-sonarscanner begin \
                        /k:"${{ secrets.SONARQUBE_PROJECT_KEY }}" \
                        /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
                        /d:sonar.host.url="http://sonarqube:9000" \
                        /v:"1.0.0" \
                        /d:sonar.qualitygate.wait=true \
                        /d:sonar.branch.name="${{ env.branch }}"
            dotnet build
            $HOME/.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

          elif [ "${{ env.APP_LANGUAGE }}" == "java" ]; then
            echo "Running SonarQube analysis for Java..."
            sonar-scanner -Dsonar.projectKey=$SONARQUBE_PROJECT_KEY -Dsonar.sources=. -Dsonar.host.url="http://sonarqube:9000" -Dsonar.login="$SONAR_TOKEN"

          elif [ "${{ env.APP_LANGUAGE }}" == "python" ]; then
            echo "Running SonarQube analysis for Python..."
            sonar-scanner -Dsonar.projectKey=$SONARQUBE_PROJECT_KEY -Dsonar.sources=. -Dsonar.host.url="http://sonarqube:9000" -Dsonar.login="$SONAR_TOKEN"

          else
            echo "Unknown application language! Skipping SonarQube analysis."
            exit 1
          fi

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Store your Docker Hub username in GitHub secrets
          password: ${{ secrets.DOCKER_PASSWORD }}  # Store your Docker Hub password or access token in GitHub secrets          

      # Docker Build Stage
      - name: Build Docker image
        run: |
          docker build -t ${{ github.repository }}:${{ github.sha }} -f Dockerfile . || { echo "ERROR: Docker build failed. Exiting."; exit 1; }

      # Cache Trivy Docker image to avoid re-downloading it in every run
      - name: Cache Trivy Docker image
        uses: actions/cache@v2
        with:
          path: /tmp/.cache/trivy
          key: ${{ runner.os }}-trivy-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-trivy-

      # Create .trivyignore file to whitelist CVEs
      - name: Create .trivyignore file
        run: |
          echo "CVE-2022-3715" >> .trivyignore
          echo "CVE-2019-8457" >> .trivyignore
          echo "CVE-2021-33560" >> .trivyignore
          echo "CVE-2022-4899" >> .trivyignore
          echo "CVE-2023-45853" >> .trivyignore
          echo "CVE-2023-31484" >> .trivyignore

      # Run Trivy Docker container to scan image
      - name: Run Trivy Docker container to scan image
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD/.trivyignore:/root/.trivyignore:ro \
            aquasec/trivy:latest \
            --ignorefile /root/.trivyignore \
            image --exit-code 1 --severity HIGH,CRITICAL ${{ github.repository }}:${{ github.sha }} 
          TRIVY_EXIT_CODE=$?
          if [ $TRIVY_EXIT_CODE -eq 0 ]; then
            echo "No vulnerabilities found. Scan passed!"
          elif [ $TRIVY_EXIT_CODE -eq 1 ]; then
            echo "Vulnerabilities found! Scan failed."
            exit 1  # Explicitly fail the pipeline for vulnerabilities found
          else
            echo "Error occurred during scan! Exit code: $TRIVY_EXIT_CODE"
            exit $TRIVY_EXIT_CODE  # Propagate the error code if something went wrong
          fi

      # Docker Push Stage
      - name: Push Docker image
        run: |
          docker push ${{ github.repository }}:${{ github.sha }} || { echo "ERROR: Docker push failed. Exiting."; exit 1; }

      # Deploy Docker image to Dev environment
      - name: Deploy Docker image to Dev environment
        if: env.ENVIRONMENT == 'dev'
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no krishnakekan@CHL29 "docker pull ${{ github.repository }}:${{ github.sha }} && docker run -d -p 8080:80 --name ${{ github.repository }}:${{ github.sha }}" || { echo "ERROR: Deployment to dev failed. Exiting."; exit 1; }

      # Deploy Docker image to Prod environment
      - name: Deploy Docker image to Prod environment
        if: env.ENVIRONMENT == 'prod'
        run: |
          ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no krishnakekan@CHL29 "docker pull ${{ github.repository }}:${{ github.sha }} && docker stop ${{ github.repository }} || true && docker rm ${{ github.repository }} || true && docker run -d -p 8080:80 --name ${{ github.repository }}:${{ github.sha }}" || { echo "ERROR: Deployment to prod failed. Exiting."; exit 1; }
