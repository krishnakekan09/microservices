name: .NET CI Pipeline with SonarQube Analysis

on:
  push:
    branches:
      - main  # Trigger on push to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull request to the main branch
  workflow_dispatch:  # Allows manual trigger of the workflow

jobs:
  sonarcloud_analysis:
    runs-on: ubuntu-latest

    services:
      sonarqube:
        image: sonarqube
        ports:
          - 9000:9000  # Expose SonarQube on port 9000
        options: >-
          --health-cmd="curl --silent --fail http://localhost:9000/api/system/ping"
          --health-interval=10s
          --health-retries=3

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up .NET SDK
      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '7.0'

      # Set up SonarQube for analysis (on local SonarQube instance)
      - name: Run SonarQube analysis
        run: |
          # Begin SonarQube analysis
          dotnet sonarscanner begin /k:"your-sonar-project-key" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="http://localhost:9000"
          # Build the project
          dotnet build
          # End SonarQube analysis
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      # Build Docker image
      - name: Build Docker image
        run: |
          docker build -t hello-world-api:${{ github.sha }} .

      # Run tests inside Docker container
      - name: Run tests inside Docker container
        run: |
          docker run --rm hello-world-api:${{ github.sha }} dotnet test  # Run tests inside the container

      # Docker image scanning (optional)
      - name: Scan Docker image with Trivy
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL hello-world-api:${{ github.sha }}  # Fail if vulnerabilities are found

      # Push Docker image to registry
      - name: Push Docker image
        run: |
          docker push hello-world-api:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: sonarcloud_analysis  # Ensure SonarQube analysis finishes before deploying

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Deploy Docker image to production
      - name: Deploy Docker image
        run: |
          ssh user@your-server "docker pull hello-world-api:${{ github.sha }}"
          ssh user@your-server "docker stop hello-world-api || true && docker run -d -p 5000:5000 --name hello-world-api hello-world-api:${{ github.sha }}"

  #failure-notify:
  #  runs-on: ubuntu-latest
  #  if: failure()  # Runs only if any of the jobs fail

  #  steps:
  #    - name: Notify failure (via email or Slack)
  #      run: |
  #        curl -X POST -H 'Content-type: application/json' --data '{"text":"Build or Deployment Failed!"}' https://hooks.slack.com/services/your/slack/webhook
