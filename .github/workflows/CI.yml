name: .NET CI Pipeline with SonarQube Analysis

on:
  push:
    branches:
      - main  # Trigger on push to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull request to the main branch
  workflow_dispatch:  # Manual trigger of the workflow

jobs:
  sonarcloud_analysis:
    runs-on: self-hosted  # Use self-hosted runner
    env:
      DOTNET_INSTALL_DIR: $HOME/.dotnet # Custom directory for installing .NET
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages # NuGet packages directory

    permissions:
      contents: read # Grant read access to repository contents for checkout
      actions: read # Necessary for actions to function
      id-token: write # If using GitHub OIDC for authentication

    steps:
      # Checkout the CI pipeline repository (this repository where the action lives)
      - name: Checkout CI pipeline repository
        uses: actions/checkout@v2

      # Checkout the code repository (the other repository you need to build)
      - name: Checkout code from another repository
        uses: actions/checkout@v2
        with:
          repository: krishnakekan09/dotnet_hello_World  # The repository to check out
          token: ${{ secrets.GITHUB_TOKEN }}  # GitHub token for authentication
          path: code-repo  # Optional: Specify where to store the repo on the runner

      # Install dependencies (if required)
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl

      # Set up .NET SDK
      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0'
          cache: false

      # Install .NET runtime explicitly
      - name: Install .NET runtime (if needed)
        run: |
          sudo apt-get install -y dotnet-runtime-7.0

      # Set the DOTNET_INSTALL_DIR environment variable and adjust PATH
      - name: Set DOTNET_INSTALL_DIR and add .NET to PATH
        run: |
          # Create a directory for .NET installation
          mkdir -p $DOTNET_INSTALL_DIR
          # Set DOTNET_ROOT environment variable to the custom directory
          echo "DOTNET_ROOT=$DOTNET_INSTALL_DIR" >> $GITHUB_ENV
          # Add the custom .NET directory to the PATH
          echo "$DOTNET_INSTALL_DIR" >> $GITHUB_PATH

      # Cache SonarQube packages
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Cache SonarQube scanner
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      # Install SonarQube scanner if not cached
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./.sonar/scanner
          # Check if dotnet-sonarscanner is already installed
          if ! dotnet tool list --tool-path $HOME/.sonar/scanner | grep -q "dotnet-sonarscanner"; then
            dotnet tool install dotnet-sonarscanner --tool-path $HOME/.sonar/scanner  # Install the tool only if not already installed
          else
            echo "dotnet-sonarscanner is already installed, skipping installation."
          fi

      # Run SonarQube analysis
      - name: Build and analyze
        run: |
          # Change to the directory where the solution file is located (root of your repository)
          cd code-repo
          # Ensure that the SonarScanner tool directory is added to PATH
          echo "$HOME/.sonar/scanner" >> $GITHUB_PATH
          # Begin SonarQube analysis
          $HOME/.sonar/scanner/dotnet-sonarscanner begin /k:"${{ secrets.DOTNET_HELLO_WORLD_PROJECTKEY }}" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="http://localhost:9000"
          # Build the solution by specifying the path to the .sln file
          dotnet build ./dotnet-hello-world.sln
          # End SonarQube analysis
          $HOME/.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Store your Docker Hub username in GitHub secrets
          password: ${{ secrets.DOCKER_PASSWORD }}  # Store your Docker Hub password or access token in GitHub secrets

      # Build Docker image
      - name: Build Docker image
        run: |
          cd code-repo  # Navigate to the folder containing the Dockerfile
          docker build -t krishnakekan09/gitaction:${{ github.sha }} .

      # Run tests inside Docker container
      #- name: Run tests inside Docker container
      #  run: |
      #    cd code-repo  # Navigate to the folder containing the Dockerfile
      #    docker run --rm hello-world-api:${{ github.sha }} dotnet test  # Run tests inside the container

      # Cache Trivy Docker image to avoid re-downloading it in every run
      - name: Cache Trivy Docker image
        uses: actions/cache@v2
        with:
          path: /tmp/.cache/trivy
          key: ${{ runner.os }}-trivy-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-trivy-

      # Create .trivyignore file to whitelist CVEs
      - name: Create .trivyignore file
        run: |
          echo "CVE-2022-3715" >> .trivyignore
          echo "CVE-2019-8457" >> .trivyignore
          echo "CVE-2021-33560" >> .trivyignore
          echo "CVE-2022-4899" >> .trivyignore
          echo "CVE-2023-45853" >> .trivyignore

      # Run Trivy Docker container to scan your Docker image
      - name: Run Trivy Docker container to scan image
        run: |
          # Run the Trivy scan
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD/.trivyignore:/root/.trivyignore:ro \
            aquasec/trivy:latest \
            --ignorefile /root/.trivyignore \
            image --exit-code 1 --severity HIGH,CRITICAL krishnakekan09/gitaction:${{ github.sha }} 

          # Capture the exit code of the Trivy scan
          TRIVY_EXIT_CODE=$?

          # Check the exit code and handle it accordingly
          if [ $TRIVY_EXIT_CODE -eq 0 ]; then
            echo "No vulnerabilities found. Scan passed!"
          elif [ $TRIVY_EXIT_CODE -eq 1 ]; then
            echo "Vulnerabilities found! Scan failed."
            exit 1  # Explicitly fail the pipeline for vulnerabilities found
          else
            echo "Error occurred during scan! Exit code: $TRIVY_EXIT_CODE"
            exit $TRIVY_EXIT_CODE  # Propagate the error code if something went wrong
          fi

      # Push Docker image to registry
      - name: Push Docker image
        run: |
          docker push krishnakekan09/gitaction:${{ github.sha }}

      - name: Debug GitHub SHA
        run: |
          echo "GitHub SHA: ${{ github.sha }}"
  deploy:
    runs-on: self-hosted  # Use self-hosted runner for deployment as well
    needs: sonarcloud_analysis  # Ensure SonarCloud analysis finishes before deploying

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Debug GitHub SHA
        run: |
          echo "GitHub SHA: ${{ github.sha }}"

      # Deploy Docker image to production server
      - name: Deploy Docker image
        run: |
          # Set up the SSH private key for authentication (ed25519 key)
          #echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25520
          #chmod 600 ~/.ssh/id_ed25520
          # Optionally, disable strict host key checking (for security reasons in GitHub Actions, it's okay to disable)
          #echo -e "Host *\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
          # SSH into the production server and pull the latest Docker image
          ssh -o StrictHostKeyChecking=no krishnakekan@CHL29 "docker pull krishnakekan09/gitaction:${{ github.sha }}"
          # Stop and remove any existing container (if it exists)
          ssh -o StrictHostKeyChecking=no krishnakekan@CHL29 "docker stop krishnakekan09/gitaction || true && docker rm krishnakekan09/gitaction || true"
          # Run the new Docker container
          ssh -o StrictHostKeyChecking=no krishnakekan@CHL29 "docker run -d -p 5000:5000 --name krishnakekan09/gitaction krishnakekan09/gitaction:${{ github.sha }}"
